package cn.com.jr.HTUmidware.clientofdev;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Scanner;

import com.alibaba.fastjson.JSONObject;

import io.netty.handler.codec.DecoderException;

/**
 * Created by lianrongfa on 2018/5/17.
 */
public class ClientStart {
    public static void main(String[] args) throws UnsupportedEncodingException{
//        byte [] bytes= {0x68, 0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x03,0x06,0x03,(byte) 0xe8,0x03,(byte)0xef,0x03,(byte) 0xea,0x0d,0x0a};
//         byte [] bytess16= {0x68, 0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x01,0x06,0x13,0x0a,0x01,0x0d,0x01,0x01,0x0d,0x0a};
//         String string16= Arrays.toString(bytess16);
        
//		 byte [] bytes11= {0x01,0x06};
//		 byte [] bytes12= {0x02,0x01};//---
//		 byte [] bytes13= {0x02,0x0c};
//		 byte [] bytes14= {0x03,0x06};
//		 byte [] bytes15= {0x04,0x02};
//		 byte [] bytes16= {0x05,0x03};
		 byte [] bytes17= {(byte) 0xB0,0x01};
		 byte [] bytes18= {0x07,0x01};
		 byte [] bytes19= {0x08,0x01};
//		 byte [] bytes20= {0x09,0x0c};
//		 byte [] bytes21= {0x0a,0x0c};
//		 byte [] bytes22= {0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte) 0xea,0x00,0x19,0x5a,0x00,0x19,0x78};
//        byte [] bytes22= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x0a,0x0c,0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte) 0xea,0x00,0x19,0x5a,0x00,0x19,0x78,0x0d,0x0a};

//		HexToUniteGrapDeci hb = new HexToUniteGrapDeci();
    	
//    	String conversionData = hb.conversionData(bytes22);

//    	System.out.println(changeDataFormat(conversionData));
    	
         /* //帧头
  		private String frameHeader;
  		//设备编码
  		private String equipmentCode;
  		//类型码
  		private String typeCode;
  		//数据长度
  		private String dataLength;
  		//转换后数据
  		private String parseAfterData;
        */
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("equipmentCode","Z21011234");
        jsonObject.put("typeCode","5");
//        jsonObject.put("allDataLength","25");
//        jsonObject.put("allDataLength","26");
        jsonObject.put("allDataLength","25");
        jsonObject.put("dataLength","03");
//        jsonObject.put("parseAfterData","TCPOK");
//        jsonObject.put("parseAfterData","191001120101");
//        jsonObject.put("parseAfterData","");
//        jsonObject.put("parseAfterData","LOGIN");
        jsonObject.put("parseAfterData","01,01,05");
        String msg = jsonObject.toJSONString();
//        msg="faultJson="+msg;
        msg=msg;
        socketTest(msg,1,"2");
	   //平台向中间件消息后给平台返回的数据，如果没有成功就发中间件的错误数据	 
//        System.out.println(httpRequest("http://192.168.0.11:1818/dkgl/dkgl/dkProblem.do?method=saveProblem","POST",msg));
  
//        nettyTest();
//        socketNettyTest();
    }
    
    
 

    private static void nettyTest() {
        try {
            //String ip="118.26.65.50";
        	String ip="127.0.0.1";
        	//String ip="117.172.29.240";
//            Client client = new Client(ip, 9000);
            Client client = new Client(ip, 9002);
            //client.sendMessage(new byte[]{70,0x31,0x31,0x38,0x32,0x34,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20});
            Scanner scanner = new Scanner(System.in);
            while (true){
                String s = scanner.nextLine();
//                byte [] bytes={65,0x30,0x31,0x38,0x30,0x35,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31};//消息
                
              //详细作业记录上传  第二版协议
              //  byte [] bytes={68,0x30,0x32,0x32,0x30,0x37,0x31,0x31,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x39,0x30,0x37,0x32,0x32,0x30,0x34,0x32,0x34,0x34,0x31,
//                					   0x31,0x31,0x31,0x31,0x31,0x31};
             /*   byte[]  bytes = {0x44  ,0x31
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32   ,0x31	,0x32	,0x33	,0x35	,0x35	,0x39   //上下行预告--
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x32	,0x31	,0x36	//出场
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x34	,0x31	,0x33   //上下行报警始
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x34	,0x31	,0x35	//上下行报警末
                		,0x20	,0x20	,0x20	,0x20	,0x20	,0x20   ,0x20	,0x20	,0x20	,0x20	,0x20	,0x20	//A杆关闭始--
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x33	,0x39	,0x32	,0x35	//A杆关闭末
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x33	,0x39	,0x31	,0x36	//B杆关闭始
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x33	,0x39	,0x32	,0x38	//B杆关闭末
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x30	,0x35	//上下行到达始
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x33	,0x32	//上下行到达末
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x32	,0x36	//A杆打开始
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x33	,0x35	//A杆打开末
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x32	,0x36	//B杆打开始
                		,0x31	,0x39	,0x30	,0x38	,0x31	,0x32	,0x31	,0x30	,0x34	,0x36	,0x33	,0x36	//B杆打开末
                		,0x32	,0x31	,0x31	,0x31	,0x31	,0x31   };
*/
                /*byte[] bytes ={70,0x31,0x31,0x38,0x32,0x34,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
                        70,0x31,0x31,0x38,0x32,0x34,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
                        70,0x31,0x31,0x38,0x32,0x34,0x20,0x20,0x20,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
                        0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30
                };*/

                //byte [] bytes={70,0x31,0x31,0x38,0x32,0x34,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};//消息
                byte [] bytes= {0x68, 0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x01,0x06,0x13,0x0a,0x01,0x0d,0x01,0x01,0x0d,0x0a};
                client.sendMessage(bytes);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *模拟下位机
     */
    private static void socketNettyTest() {
        try {
            Socket socket = new Socket("127.0.0.1", 9002);

            OutputStream outputStream = socket.getOutputStream();
            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
            DataInputStream dataInputStream = new DataInputStream(socket.getInputStream());
            //String json="{'haha':'1'}";


            Scanner scanner = new Scanner(System.in);
            while (true) {

                String s = scanner.nextLine();

//              byte [] bytess16= {0x68, 0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x01,0x06,0x13,0x0a,0x01,0x0d,0x01,0x01,0x0d,0x0a};
//              byte [] bytess020c= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x02,0x0c,0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte) 0xea,0x00,0x19,0x5a,0x00,0x19,0x78,0x0d,0x0a};
//              byte [] bytess0306= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x03,0x06,0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte)0xea,0x0d,0x0a};
//              byte [] bytess0402= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x04,0x02,0x00,0x19,0x0d,0x0a};
//              byte [] bytess0503= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x05,0x03,0x00,0x19,0x5a,0x0d,0x0a};
//              byte [] bytess0601= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x06,0x01,0x78,0x0d,0x0a};
//              byte [] bytess0701= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x07,0x01,0x78,0x0d,0x0a};
//              byte [] bytess0801= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x08,0x01,0x01,0x0d,0x0a};
              byte [] bytess090c= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x09,0x0c,0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte) 0xea,0x00,0x19,0x5a,0x00,0x19,0x78,0x0d,0x0a};
//              byte [] bytess0a0c= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x0a,0x0c,0x03,(byte) 0xe8,0x03,(byte) 0xe9,0x03,(byte) 0xea,0x00,0x19,0x5a,0x00,0x19,0x78,0x0d,0x0a};
//              byte [] bytess0b01= {0x68,0x57,0x32,0x30,0x30,0x31,0x30,0x30,0x30,0x31,0x0b,0x01,0x01,0x0d,0x0a};
                for (byte b : bytess090c) {
                    System.out.println(b+"\t");
                }
                dataOutputStream.write(bytess090c);//消息
                //dataOutputStream.write(bytess2);//消息

                dataOutputStream.flush();
                byte[] bytes1 = new byte[14];
                int read = dataInputStream.read(bytes1);

                for (byte b : bytes1) {
                    System.out.println(b+"\t");
                }

            }


        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 给中间消息服务器发送json信息
     * @param json json信息，具体格式视type类型而定
     *  @param webSysLength 参照下文
     * @param webSysType 参照下文
     */
    private static void socketTest(String json,int webSysLength, String webSysType) {
        try {
//            Socket socket = new Socket("192.168.0.11", 1818);
            Socket socket = new Socket("127.0.0.1", 1818);

            OutputStream outputStream = socket.getOutputStream();
            //String json="{'haha':'1'}";

            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);

            //顺序不能乱
            dataOutputStream.writeInt(0xCAFF);//消息头
            dataOutputStream.writeInt(webSysLength);
            dataOutputStream.writeChars(webSysType);
//            dataOutputStream.writeBytes(type);
//            dataOutputStream.writeInt(type);//操作类型
            dataOutputStream.writeInt(json.length());//消息长度
            dataOutputStream.write(json.getBytes());//消息

            dataOutputStream.flush();

            outputStream.close();
            socket.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String httpRequest(String requestUrl,String requestMethod,String outputStr){
        StringBuffer buffer=new StringBuffer();
        try{
            URL url=new URL(requestUrl);
            HttpURLConnection conn=(HttpURLConnection)url.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setRequestMethod(requestMethod);
            conn.connect();
            //往服务器端写内容 也就是发起http请求需要带的参数
            if(null!=outputStr){
                OutputStream os=conn.getOutputStream();
                os.write(outputStr.getBytes("utf-8"));
                os.close();
            }

            //读取服务器端返回的内容
            InputStream is=conn.getInputStream();
            InputStreamReader isr=new InputStreamReader(is,"utf-8");
            BufferedReader br=new BufferedReader(isr);

            String line=null;
            while((line=br.readLine())!=null){
                buffer.append(line);
            }
            conn.disconnect();
        }catch(Exception e){
            e.printStackTrace();

        }
        return buffer.toString();
    }
}
